                                                                 TRANSACTION
 Transaction
The transaction is a set of logically related operation. It contains a group of tasks.
A transaction is an action or series of actions. It is performed by a single user to perform operations for accessing the contents of the database.


Operations of Transaction:
Read(X): Read operation is used to read the value of X from the database and stores it in a buffer in main memory.

Write(X): Write operation is used to write the value back to the database from the buffer.

Let's take an example to debit transaction from an account which consists of following operations:

1.  R(X);  
2.  X = X - 500;  
3.  W(X);  
Let's assume the value of X before starting of the transaction is 4000.

The first operation reads X's value from database and stores it in a buffer.
The second operation will decrease the value of X by 500. So buffer will contain 3500.
The third operation will write the buffer's value to the database. So X's final value will be 3500.
But it may be possible that because of the failure of hardware, software or power, etc. that transaction may fail before finished all the operations in the set.

For example: If in the above transaction, the debit transaction fails after executing operation 2 then X's value will remain 4000 in the database which is not acceptable by the bank.

To solve this problem, we have two important operations:

Commit: It is used to save the work done permanently.
Rollback: It is used to undo the work done.




                                                               
                                                               Transaction property
The transaction has the four properties. These are used to maintain consistency in a database, before and after the transaction.

 THE PROPERTIES OF TRANSACTION ARE:
 
1.Atomicity
2.Consistency
3.Isolation
4.Durability

                                                               DBMS Transaction property
 ================================================================================================================================================================================
.                                                                      Atomicity
==================================================================================================================================================================================
It states that all operations of the transaction take place at once if not, the transaction is aborted.
There is no midway, i.e., the transaction cannot occur partially. Each transaction is treated as one unit and either run to completion or is not executed at all.
Atomicity involves the following two operations:

Abort: If a transaction aborts then all the changes made are not visible.

Commit: If a transaction commits then all the changes made are visible.



Example: Let's assume that following transaction T consisting of T1 and T2. A consists of Rs 600 and B consists of Rs 300. Transfer Rs 100 from account A to account B.

T1	T2
Read(A)
A:= A-100
Write(A)	Read(B)
Y:= Y+100
Write(B)
After completion of the transaction, A consists of Rs 500 and B consists of Rs 400.

If the transaction T fails after the completion of transaction T1 but before completion of transaction T2, then the amount will be deducted from A but not added to B.
This shows the inconsistent database state. In order to ensure correctness of database state, the transaction must be executed in entirety.
=================================================================================================================================================================================

.                                                                        
                                                                   Consistency
===================================================================================================================================================================================
The integrity constraints are maintained so that the database is consistent before and after the transaction.
The execution of a transaction will leave a database in either its prior stable state or a new stable state.
The consistent property of database states that every transaction sees a consistent database instance.
The transaction is used to transform the database from one consistent state to another consistent state.
For example: The total amount must be maintained before or after the transaction.

Total before T occurs = 600+300=900  
Total after T occurs= 500+400=900  
Therefore, the database is consistent. In the case when T1 is completed but T2 fails, then inconsistency will occur.

 =================================================================================================================================================================================                                                                   
                                                                 Isolation
=================================================================================================================================================================================
It shows that the data which is used at the time of execution of a transaction cannot be used by the second transaction until the first one is completed.
In isolation, if the transaction T1 is being executed and using the data item X, then that data item can't be accessed by any other transaction T2 until the transaction T1 ends.
The concurrency control subsystem of the DBMS enforced the isolation property.
                                                                
 =================================================================================================================================================================================                                                           
                                                               Durability
==================================================================================================================================================================================
The durability property is used to indicate the performance of the database's consistent state. It states that the transaction made the permanent changes.
They cannot be lost by the erroneous operation of a faulty transaction or by the system failure. When a transaction is completed, 
then the database reaches a state known as the consistent state. That consistent state cannot be lost, even in the event of a system's failure.
The recovery subsystem of the DBMS has the responsibility of Durability property.





